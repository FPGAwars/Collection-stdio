// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Bus');
gettext('Debug');
gettext('Device');
gettext('Others');
gettext('stdin');
gettext('stdout');
gettext('stdin-joiner');
gettext('stdin bus joiner (data + tic)');
gettext('stdin-spliter');
gettext('stdin bus splitter into data and tic signals');
gettext('adder-data-tic');
gettext('The data + tic signal are added into the stdout bus)');
gettext('joiner-2-data-tic');
gettext('stdout bus joiner (data + tic)');
gettext('next-in');
gettext('Convert the 1-bit next signal into a 10-bit stdout bus');
gettext('next-out');
gettext('Extract the next signal from the stdout bus');
gettext('spliter-2-data-tic');
gettext('stdout bus splitter into data and tic signals');
gettext('Memory');
gettext('Print-str');
gettext('Serial print-str');
gettext('Print a constant string of 15 or less characters');
gettext('Comparador de un operando de 8 bits. Se compara si el operando es igual al parámetro');
gettext('10 bits, 2-1 Multiplexor');
gettext('Biestable de datos (Tipo D). Cuando se recibe un tic por load se captura el dato');
gettext('Un bit constante a 0');
gettext('Un bit constante a 1');
gettext('16-bytes memory, initilized with a string');
gettext('Máquina de contar, de 4 bits, con entrada de stop');
gettext('Biestable de almacenamiento del estado de la máquina');
gettext('Biestable con entradas de Set y Reset síncronas, para poner y quitar notaficaciones de eventos');
gettext('Detector de flancos de subida y bajada. Emite tic por las salidas correspondientes al detecta los flancos');
gettext('Puerta NOT');
gettext('Puerta AND');
gettext('Puerta OR');
gettext('Registro de 4 bits con entrada de reset');
gettext('Sumador de un operando de 4 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('Comparador de dos operandos de 4 bits');
gettext('Valor genérico constante (menos 1), de 4 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Serial transmiter for the stdout bus');
gettext('Transmisor serie');
gettext('## PRINT: Transmit one character (STDOUT bus)\n\nWhen **idle**, the STDOUT bus crosses the component without modification     \n\nWhen the machine starts, the first chars outputed and the state is changed to busy  \nWhen the transmitter is done (tic received in next)  the machine is turned off');
gettext('Start tic: The transmision of  \nthe bytes is started');
gettext('Transmit the next  \ncharacter from the string');
gettext('Tic output: Execute!');
gettext('The machine has finished');
gettext('Count machine. It is counting  \nuntil the stop signal is  \nactivated');
gettext('If the character read is 0  \nwe have reached the end of  \nthe string');
gettext('Memory with the string  \nto be transmited');
gettext('**STDOUT BUS**');
gettext('Transparent mode...  \nor not');
gettext('**Reloj del sistema**');
gettext('**Estado de**  \n**la máquina**');
gettext('Máquina encendida');
gettext('Máquina apagada  \n(rst = 1)');
gettext('Tic de arranque');
gettext('Tic de fin');
gettext('**Contador de ciclos**');
gettext('Número de ciclos  \ncontados');
gettext('Valor  \nincrementado');
gettext('### Salidas');
gettext('Estado de la máquina');
gettext('Ciclo actual');
gettext('Cuenta finalizada');
gettext('Ejecutar el ciclo');
gettext('Número de ciclos  \na contar');
gettext('¿Estamos en el  \nciclo k-1?');
gettext('Solo se hace caso a la  \nentrada next si la  \nmáquina está encendida');
gettext('Nuevo ciclo');
gettext('Si es el ciclo k-1 y  \nse pide un ciclo  \nnuevo: Terminar');
gettext('Apagar la  \nmáquina');
gettext('Ciclo nuevo:  \nincrementar la cuenta');
gettext('El tic de start se saca  \npor exec para que se ejecute  \nel primer ciclo');
gettext('Si la máquina está  \napagada, las señales  \nde ejecución no pueden  \nsalir!');
gettext('Retrasar la señal un ciclo  \nmientras que se detecta si  \nla máquina ha finalizado o no');
gettext('Apagado automática,  \ncuando la máquina  \ntermina');
gettext('Apagado manual');
gettext('**Tic de apagado**');
gettext('**Tic de encendido**');
gettext('**Inicializar**');
gettext('**Estado de la máquina**');
gettext('## Detector doble: flancos de subida y bajada\n\nSe detectan tanto los flancos de subida como de bajada y se emite los  \ntics por sus salidas correspondientes');
gettext('Señal de  \nentrada');
gettext('Reloj del  \nsistema');
gettext('## STDOUT serial\n\nSerial transmitter for the STDOUT bus\n');
gettext('**STDOUT Bus**  \n* Data to transmit (8 bits)  \n* tic (1 bit)\n* data sent (done tic, 1 bit)');
gettext('PrintLn-OK');
gettext('Print the OK message');
gettext('Print the OK + new line string');
gettext('Print a constant string of 7 or less characters');
gettext('8-bytes memory, initilized with a string');
gettext('Máquina de contar, de 3 bits, con stop');
gettext('Registro de 3 bits con entrada de reset');
gettext('Comparador de dos operandos de 3 bits');
gettext('Valor genérico constante (menos 1), de 3 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Sumador de un operando de 3 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('## Debugger-PrintLn-OK\n\nPrint the OK message');
gettext('Tic for printing');
gettext('The machine is done  \nwhen the block  \nis done');
gettext('## PRINTLN-OK: Print the OK + new line string\n');
gettext('Para automático de la  \nmáquina cuando ha terminado  ');
gettext('Paro externo');
gettext('PrintLn-base-4');
gettext('Serial debugger for base 4 numbers (2-bits). It prints the number + a line feed');
gettext(' Transmit one bit as a character + a new line');
gettext(' Transmit two bits as a base-4 character (0-3)');
gettext('Agregador de 2 buses de 6 y 2-bits a bus de 8-bits');
gettext('Valor genérico constante, de 6 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Transmit one character to the STDOUT bus');
gettext('Código ASCII del carácter LF');
gettext('Valor genérico constante, de 8 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('## Debugger-PrintLn-base-4\n\nPrint a 2-bit number on the console, followed by a new  \nline character');
gettext('2-bit number to print  \n(base-4. Simbols: 0,1,2 and 3)  ');
gettext('**Serial transmitter**');
gettext('Print the current  \nBase 4 number');
gettext('Insert the done signal  \nin the stdout BUS');
gettext('## PRINTLN-bit-stdout: Transmit one bit (STDOUT bus)  \n\nWhen activated, the bit + a new line are sentd');
gettext('Not connected');
gettext('The machine is busy either  \nthe block 1 is busy or  \nthe block 2 is busy');
gettext('## PUTC-base4: Transmit one base-4 number \n\nWhen activated, the base-4 number is sent as a character (0-3)  \nIf not activated, the stdout bus is in transparent mode');
gettext('Bit to be transmited');
gettext('Transmit now! (tic)  \nActivate the machine');
gettext('If the machine is ready and  \nthe next tic is received:  \nwe are done');
gettext('The machine is done');
gettext('Machine is on: send a character');
gettext('State of the machine  \n0: OFF  \n1: ON: Sending one character');
gettext('**Create the bus**  \nfrom the data and tic signals');
gettext('## PUTC: Transmit one character (STDOUT bus)\n\nWhen **idle**, the STDOUT bus crosses the component without modification    \n\nWhen the machine starts, the char is outputed and the state is changed to busy  \nWhen the transmitter is done (tic received in next)  the machine is turned off');
gettext('Start tic: The byte from the  \ninput char is transmited');
gettext('Char to be transmited');
gettext('State of the machine:  \n1: ON: transmitting  \n2: OFF: transparent mode  ');
gettext('If the machine is on  \nand the character has been  \ntransmitted: Turn it off');
gettext('PrintLn-bit');
gettext('Serial Debugger for printing one bit + new line');
gettext('Print a bit plus a new line');
gettext(' Transmit one bit as a character. STDOUT-bus');
gettext('Multiplexor de 2 a 1 de 8 bits');
gettext('## Debugger-PrintLn-Bit\n\nPrint a bit on the console, followed by a new  \nline character');
gettext('## PrintLn-bit: Print one bit plus a new line character  \n');
gettext('**Block 1**  \nPrint the bit (0,1)');
gettext('**Block 2**  \nPrint new line char');
gettext('## PUTC-bit-stdout: Transmit one bit (STDOUT bus)  \n\nWhen activated, the bit input is sent as the character '0' or '1'  \nWhen not active, the stdout crossed the block (transparent mode)');
gettext('The bit to be transmitted should be  \nsyncronized with its transmit tic');
gettext('Character to transmit when  \nthe input bit is 1');
gettext('Character to transmit when  \nthe input bit is 0');
gettext('Select with character to transmit  \naccording to the input bit');
gettext('02-bits');
gettext('Print-ram-2x1-bit');
gettext('Serial debugger for print the address (1-bit) and data (1-bit) of a 2x1 RAM memory');
gettext('Print a constant string of 3 or less characters');
gettext('Máquina de contar, de 2 bits (cuenta hasta 4 ciclos)');
gettext('Registro de 2 bits con reset');
gettext('Sumador de un operando de 2 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('Comparador de dos operandos de 2 bits');
gettext('Valor genérico constante (menos 1), de 2 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('4-bytes memory, initilized with a string');
gettext('## Debugger: RAM 2x1\n\nComponent for debugging a 2x1 RAM  \nPrint the Address A (1-bit) and the data D (1 bit) with  \nthe format: \n\n```\n[A]: D\n```\n');
gettext('**Address**');
gettext('**Data**');
gettext('Serial-rx');
gettext('Receptor serie asíncrono. Velocidad por defecto: 115200 baudios');
gettext('Serial-tx');
gettext('stdin-serial');
gettext('Componente genérico');
gettext('## STDIN serial\n\nSerial receiver for the STDIN bus\n');
gettext('**STDIN Bus**  \n* Data received (8 bits)  \n* tic (1 bit)');
gettext('stdout-serial');
gettext('Getc');
gettext('Input_');
gettext('Print');
gettext('PrintLn');
gettext('Putc');
gettext('Regs');
gettext('Getc-bit');
gettext('Detect one bit');
gettext('Codificador de 2 a 1. La salida zero se activa cuando ninguna entrada está activada');
gettext('9 bits, 2-1 Multiplexor');
gettext('Valor genérico constante, de 9 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('## GETC-BIT  \n\nRead one bit of information. By default the  \ncharacteres '0' and '1' are converted into  \n1 bit');
gettext('Check if the character received is one of  \nthe two symbols expected');
gettext('The current caracter matches the  \nconstant specified (level output)');
gettext('Tic ouptput. The current character  \nmatches the constant');
gettext('The character matches one  \nof the two expected symbols ');
gettext('**STDIN BUS**');
gettext('Select machine or  \ntransparent channel');
gettext('Output the current data  \ntic to the rcv pin');
gettext('Getc-char');
gettext('Get a constant character');
gettext('## GETC-CHAR  \n\nDetects if a constant CHAR has arrived');
gettext('Check if the character received is the one  \nexpected (set by the parameter. Default: 0)');
gettext('Charactter detected:  \nOutput the current data  \ntic to the rcv pin');
gettext('input-bit-echo');
gettext('When activated, it waits for a bit to be received codified in the '0' and '1' symbols by default. The received character is echoed (if valid)');
gettext('When activated, it waits for a bit to be received codified in the '0' and '1' symbols by default');
gettext('## INPUT-BIT-ECHO  \n\nWhen the machine is turned on, it waits for one  \nof the two symbols (default: '0' and '1') and  \ncoded them into oen bit, that is returned and  \nthe machine is turned off\n\nThe valid symbols are sent through the  \nstdout');
gettext('**Start the machine**');
gettext('State of the machine');
gettext('Received bit');
gettext('**Echo generator**  \nOnly the valid characters  \nare echoed');
gettext('## INPUT-BIT  \n\nWhen the machine is turned on, it waits for one  \nof the two symbols (default: '0' and '1') and  \ncoded them into oen bit, that is returned and  \nthe machine is turned off');
gettext('Input machine state:  \n0: OFF  \n1: ON');
gettext('If the machine is ON and the  \nsymbol is valid, the tic is  \nallowed to pass...');
gettext('input-bit');
gettext('asc');
gettext('Print-str-02');
gettext('Print a constant 1-char string');
gettext('Máquina de contar, de 1 bit, con entrada de Stop');
gettext('Biestable de cambio (Tipo T) con reset. Cuando se recibe un tic cambia de estado');
gettext('2-bytes memory, initilized with a string');
gettext('¿Estamos en el  \nciclo 1?');
gettext('Si es el ciclo 1 y  \nse pide un ciclo  \nnuevo: Terminar');
gettext('Print-str-04');
gettext('Print-str-08');
gettext('Print-str-128');
gettext('Print a constant string of 127 or less characters');
gettext('128-bytes memory, initilized with a string');
gettext('Máquina de contar, de 7 bits, con entrada de stop');
gettext('Registro de 7 bits con reset');
gettext('7-bits adder. One operand is a constant (no carry)');
gettext('two operand 7-bits comparator');
gettext('Valor genérico constante (menos 1), de 7 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Print-str-16');
gettext('Print-str-256');
gettext('Print a constant string of 256 or less characters');
gettext('256-bytes memory, initilized with a string');
gettext('Máquina de contar, de 8 bits, con entrada de stop');
gettext('Registro de 8 bits con reset');
gettext('Sumador de un operando de 8 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('Comparador de dos operandos de 8 bits');
gettext('Valor genérico constante (menos 1), de 8 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Print-str-32');
gettext('Print a constant string of 31 or less characters');
gettext('32-bytes memory, initilized with a string');
gettext('Máquina de contar, de 5 bits, con entrada de stop');
gettext('Registro de 5 bits');
gettext('5-bits adder. One operand is a constant (no carry)');
gettext('two operand 5-bits comparator');
gettext('Valor genérico constante (menos 1), de 5 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Print-str-64');
gettext('Print a constant string of 63 or less characters');
gettext('64-bytes memory, initilized with a string');
gettext('Máquina de contar, de 6 bits, con entrada de stop');
gettext('Registro de 6 bits con reset');
gettext('6-bits adder. One operand is a constant (no carry)');
gettext('two operand 6-bits comparator');
gettext('Valor genérico constante (menos 1), de 6 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Print-asc-02');
gettext('Print a constant string defined by 2 ascii bytes');
gettext('Memoria de dos bytes');
gettext('Memory with the string  \nto be transmited (in ASCII)');
gettext('Print-asc-04');
gettext('Print a constant string defined by 4 ascii bytes');
gettext('4 bytes memory');
gettext('Print-asc-08');
gettext('Print a constant string defined by 8 ascii bytes');
gettext('8 bytes memory');
gettext('Print-asc-128');
gettext('Print a constant string defined by 128 ascii bytes');
gettext('128 bytes memory');
gettext('Print-asc-16');
gettext('Print a constant string defined by 16 ascii bytes');
gettext('16 bytes memory');
gettext('Print-asc-256');
gettext('Print a constant string defined by 256 ascii bytes');
gettext('256 bytes memory');
gettext('Print-asc-32');
gettext('Print a constant string defined by 32 ascii bytes');
gettext('32 bytes memory');
gettext('Print-asc-64');
gettext('Print a constant string defined by 64 ascii bytes');
gettext('64 bytes memory');
gettext('PrintLn-OK');
gettext('PrintLn-base-4');
gettext('PrintLn-bit');
gettext('putc-base4');
gettext('putc-bit');
gettext('putc-char');
gettext('08-bits-shift-right-load-rst');
gettext('8bits shift right register with reset and paralell load');
gettext('Serial out');
gettext('**Reset**. The register is  \ninitialized with the INI  \nparameter');
gettext('Serial input');
gettext('Paralell data');
gettext('**load** the paralell  \ndata into the register');
gettext('**Shift** right 1-bit');
gettext('Debug');
gettext('General');
gettext('Getc');
gettext('Input_');
gettext('Input_echo');
gettext('Print');
gettext('PrintLn');
gettext('Putc');
gettext('2x1-bits-memory-test');
gettext('Biestable de cambio (Tipo T). Cuando se recibe un tic cambia de estado');
gettext('Detección de pulsación. Emite un tic cada vez que se aprieta el pulsador');
gettext('Detect changed on the input signal ');
gettext('Detect different clicks on the button: normal click, doble click or long click');
gettext('Pulsador con tic de cambio, pulsación y liberación de tecla');
gettext('Sincronizar las entradas de datos con el reloj del sistema');
gettext('Remove the rebound on a mechanical switch');
gettext('Demultiplexor de 1 bit, de 1 a 2');
gettext('Test if a tic is received within time');
gettext('Timer in ms, with start and stop');
gettext('Corazón de bombeo de tics, cuyo periodo está especificado en micro-segundos. Solo se hace el bombeo cuando está habilitado');
gettext('Contador módulo M, ascendente, de 12 bits, con reset ');
gettext('Emitir un tic inicial al arrancar, y nunca más. Se esperan 32 tics antes de emitir el tic de inicialización');
gettext('Detector de flanco de subida. Emite un tic cuando detecta un flanco ascendente');
gettext('Separador de bus de 6-bits en 1 bit y bus de 5 bits');
gettext('Contador del sistema, ascendente, de 6 bits, con enable ');
gettext('Puerta OR de 3 entradas');
gettext('2x1 bits RAM memory');
gettext('Multiplexor de 2 a 1');
gettext('# 2x1 bits Memory\n\nExample of accesing to a 2x1 bits memory  \n* Click on button 1: Change the current addres (0/1)  \n* Click on button 2: Change the current data to write (0/1)  \n* Long click on button 2: Writing the current data into the current address\n\n');
gettext('**Current address**  \nIt is changed on everyt click  \nof button 1');
gettext('Show current address  \non LED7');
gettext('Long click on button 2  \nfor writing data on  \nthe memory');
gettext('Detect a change on the  \naddress');
gettext('**Print memory status**  \nThe current address and data  \nare printed on the console');
gettext('Print when there is a change  \nin the address');
gettext('or whenever there  \nis a write');
gettext('or after the reset');
gettext('**Current data**  \nIt is changed on every  \ntick of button 2');
gettext('Show current data  \non LED0');
gettext('## Memory');
gettext('Data from  \nthe memory');
gettext('**Pulsador-tic**');
gettext('## Change detector  \n\nIt emits the followings tics:\n\n* When there is a rising edge on the input signal\n* When there is a falling edge\n* When there is either a rising or falling edge');
gettext('## Button-click-3  \n\nDetect three different types of clicks in the Button:\n\n* Normal click  \n* Doble click  \n* Long click');
gettext('When the button is pressed  \nthe timer 1 is started');
gettext('If the button is pressed again  \nwithin the time, it is  \na doble click');
gettext('Timeout: It was  \nnot a doble click');
gettext('Check the current  \nbutton state: pressed  \nor not pressed');
gettext('Button state');
gettext('Button state:  \n1: Pressed  \n2: Not pressed');
gettext('Button is released:  \nwe have a click  \nIt is NOT a long click');
gettext('Button is still  \npressed: we do not know yet  \nif it is a click or long click');
gettext('Timeout for detecting a \ndoble click  \nAfter this time is not considered a  \ndoble click but two clicks in a row');
gettext('Wait for the release  \ntic');
gettext('Release tic has arrived  \nwithin time: it was a  \nnormal click  ');
gettext('In both cases it is  \nconsider a normal click');
gettext('The button has not been  \nreleased after the specified  \ntime: it is a long click');
gettext('**Outputs**');
gettext('## Timer-ms\n\nWhen the machine is active, it detects if  \nan input tic arrive within the specified time  \nIf so, another tic is sent to done. If no tic is  \nreceived within time (timeout), a tic is sent  \nto tout');
gettext('Start the machine');
gettext('Tic to detect within time');
gettext('Main timer');
gettext('Start the timer');
gettext('If a tic is received when  \nthe timer is still on,  \nlet it pass...');
gettext('The tic is delayed one unit  \nto prevent reache the timer  \nin the same cycle than start  \n(it can happens if the same tic is  \nconnect both to start and tic inputs)  ');
gettext('Stop the timer:  the tic  \nhas arrived in time');
gettext('The tic arrived in time  \nTic detected!');
gettext('No tic detected  \nwithin time');
gettext('The machine is on');
gettext('tic: No input tic detected');
gettext('tic: input tic detected!');
gettext('Biestable de estado  \nde la máquina');
gettext('Mientras la máquina  \nesté apagada el  \ncontador está a 0');
gettext('Contador de tiempo  \nen unidades de  \nmilisegundos');
gettext('El tiempo ha expirado:  \napagar la máquina');
gettext('Unidades de tiempo:  \n1000 microsec = 1ms');
gettext('Al arrancar la máquina,  \neste corazón emite un  \ntic cada 1 ms');
gettext('**Parámetro**:  \nms de espera');
gettext('Sacar el tic de apagado de  \nla máquina por abort o done  \nsegún cómo haya sido');
gettext('Si es por stop: El timer ha abortado  \nSi no, es una terminación normal (timeout)');
gettext('**Parámetro**: Módulo del contador');
gettext('## Synchronous 2x1-bit RAM\n\n* Both the read and write operation are  \n  synchronous');
gettext('Address (0/1)');
gettext('Data input');
gettext('Write tic');
gettext('Depending on the address,  \nsend the tic write to the  \ncorresponding flip-flop');
gettext('Demux-2-1');
gettext('Flip-Flop 0');
gettext('Flip-Flop 1');
gettext('Flip-flops are loaded with  \nthe data input when the  \nwrite tic is received');
gettext('Read operation:  \nOutput the selected  \nflip-flop');
gettext('The read data will be available  \non the next cycle');
gettext('Base4-counter');
gettext('Corazón de bombeo de tics a un frecuencia parametrica en Hz');
gettext('Contador módulo M, ascendente, de 2 bits, con reset ');
gettext('Generate tics');
gettext('Transmit the current number');
gettext('Count from 0 to 3');
gettext('## Base 4 counter\n\nIt prints the count from 0 to 3 on  \nthe console');
gettext('Hello-world');
gettext('## Hello World\n\nIt prints the string \"Hello World\"  \nafter the reset');
gettext('ok-button');
gettext('## PrintLn OK Test\n\nIt prints the string \"OK\" when the button  \nis pressed');
gettext('01-print-matrix');
gettext('Máquina de wait');
gettext('**Reset, HOME**  \n**CLS, GREEN**');
gettext('* Reset: \"\\033[0m\"  \n* Home:  \"\\033[H\"\n* CLS: \"\\033[2J\"\n* Green color (fg): \"\\033[32;1m\"\n\n');
gettext('https://www.youtube.com/watch?v=kIXNpePYzZU\n\nCall trans opt: received. 2-19-98 13:24:18 REC:Log>  \nTrace program: running\n');
gettext('## Example 1: Matrix (Opening scene)  \n\nTwo messages are printed on the console in green color  \nThe printing emulates a slow terminal  \n\n');
gettext('**Message 1**');
gettext('**Message 2**');
gettext('Apagado de la máquina');
gettext('02-Button-state-ANSI');
gettext('## Example 2: Big button state  \n\nThe state of the pushbutton is shown in big ANSI digits  \n');
gettext('The tic activates on print  \nor another depending on the state  \nof the button');
gettext('03-cowsay-bin');
gettext('## Example 3: Cowsay  \n\nCow say the state of the button :-)\n');
gettext('The button is pressed');
gettext('The button is released');
gettext('04-NOT-truth-table');
gettext('Máquina de contar, de 1 bit');
gettext('## Example 4: Not gate truth table  \n\nThe NOT truth table is generated automatically\n');
gettext('**Start here**');
gettext('Count machine');
gettext('## Circuit to simulate');
gettext('**New line**');
gettext('05-ram-2x1-bit-test-term');
gettext('2x1 bits RAM memory with parallel output');
gettext('Agregador de 2 cables en un bus de 2-bits');
gettext('**MAIN**');
gettext('## Write-Mode STDOOUT');
gettext('Writting addr');
gettext('**Input data**');
gettext('## Dump-Mode STDOOUT');
gettext('Dump addr');
gettext('Dump data');
gettext('## Write Mode Machine');
gettext('## Dump Mode Machine');
gettext('Select which address to use  \ndepending on the mode');
gettext('# Terminal for a 2x1 bits Memory\n\nFirst you are asked for the memory values (writing mode)  \nThen the memory values are printed on the console  \nThe process is repeated indefinitely\n\n');
gettext('## Synchronous 2x1-bit RAM (Parallel)\n\n* Both the read and write operation are  \n  synchronous\n* The memory has parallel output');
gettext('Paralell output');
gettext('06-Hcalc-acumulator');
gettext('Registro de 2 bits');
gettext('2-ops 2-bits adder (no carry)');
gettext('Separador de bus de 2-bits en dos cables');
gettext('Wait for the user to enter  \nthe '1' or '0' commands');
gettext('Print the welcome message');
gettext('Print the prompt');
gettext('Total msg');
gettext('# HCALC-0.1-acumulator\n\n1-bit calculator. It calculates the adition of bits  \nThe result is shown in 1 bit  ');
gettext('Operand to add');
gettext('Do the operation!');
gettext('2-bits acumulator');
gettext('Calculate op + acc');
gettext('acc = acc + op');
gettext('Print the least significant  \nbit of the acumulator');
gettext('Print the Total value');
gettext('07-Hcalc-terminal');
gettext('# HCALC-prompt\n\n1-bit calculator.  The user inputs two operands');
gettext('Primer operando');
gettext('Segundo operando');
gettext('Máquina de dos estados:  \n0: Captura del primer operando  \n1: Captura del segundo operando');
gettext('Suma conbinacional');
gettext('Resultado de la  \nsuma (en 1 bit)');
gettext('Primer cálculo,  \ntras el reset');
gettext('Resto de cálculos');
gettext('08-Hcalc-expresion');
gettext('Puerta XOR');
gettext('# HCALC-expresion\n\n1-bit calculator.  The user inputs two operands');
gettext('Según el operando que toque,  \nse imprime un mensaje u otro');
gettext('La suma de numeros  \nde 1 bit se implementa  \ncon una puerta XOR');
gettext('Según el operando que toque,  \nse almacena en un biestable  \nu otro');
gettext('09-Hcalc-stack');
gettext('2-bits stack pointer');
gettext('Multiplexor de 2 a 1 de 2 bits');
gettext('Comparador de igualdad, de un operando de 2 bits');
gettext('# HCALC: Stack example 1\n\nAdding two 1-bit numbers using the stack  \nIt is divided in two stages:  \n\n1) Fist, the elements are introduce by  \nthe user and stored on the stack\n\n2) Secod, the operands are read from the  \nstack, added and printed the result on  \nthe console');
gettext('Pushing 2 operands  \ninto the stack');
gettext('Poping 2 operands  \nfrom the stack');
gettext('PUsh the next  \noperand');
gettext('Push the current  \noperand');
gettext('Ask the user to  \nenter the current  \noperand');
gettext('### Stack Pointer');
gettext('Push data  \non the stack');
gettext('### Memory');
gettext('One cycle after pushing the  \noperando, push the next one');
gettext('One cycle after reading,  \npop the next operand');
gettext('Operand to pop:  \n0: First  \n1: Second');
gettext('Send the read tic to the   \ncorresponding biestable  \nfor storing the operand');
gettext('First operand');
gettext('Second operand');
gettext('Perform the  \naddition of the  \ntwo operands');
gettext('**Printing the Result**');
gettext('2-bit register  \nCurrent posicion');
gettext('Value 3 is used when  \nthe stack is empty');
gettext('## 2-bits Stack Pointer\n\nIt only have 3 position for storing information:  \n0,1 and 2. The 3 is used for indicaning empty stack\n\nIt is it initial value (3 = -1)\n\nWhen the up tic is received, the sp is incremented (but it will never  \nbe higher than its maximum value of 2) and the push tic is emitted  \n(on the next cycle) for being synchronyzed with the sp value\n\n');
gettext('When the down tic is received, the pop tic is emitted and then the sp is decremented  \n(but it cannot be lower than -1). Therefore the pop tic comes before the sp is  \ndecrement. The external circuit has one cycle to read the current value at the top. In  \nthe next cycle the sp is decremented. This approach makes it very easy to implement the  \npop operation on a memory\n\nThe changed tic is emitted whenever the sp has changed  \n(either increased or decreased)');
gettext('Incremented value of  \nthe sp');
gettext('Decremented value  \nof the sp');
gettext('Current sp value');
gettext('Select the value  \nfor updating the  \ncurrent sp');
gettext('valid Change in the  \ninput tics');
gettext('There was a change  \nin the sp register');
gettext('2-1 coder');
gettext('The sp is NOT at TOP  \nand up-tic is received');
gettext('It is ok to  \nincrement the sp');
gettext('The sp is NOT EMPTY  \nand down-tic is received');
gettext('It is ok to  \ndecrement the sp');
gettext('getc-bit-01');
gettext('# GETC-BIT: Example 1\n\nReceive a bit of information, coded into the characters '0' and '1'  \nWhen the characters '0' or '1' are received, a tic is emited by rcv  \nand the bit is loaded into the flip-flop\n\nTherefore, using the keys \"1\" and \"0\" we control the state of the  \nLED0\n');
gettext('A bit has arrived.  Store it  \nin the Flip-flop for showing  \nin the LED');
gettext('getc-bit-02');
gettext('# GETC-BIT: Example 2\n\nTwo independent bits are used to control two leds. The first one  \nis controlled by keys '0' and '1' and the second one by keys 's' and  \n'n'\n\nTwo getc-bit modules in cascade are used\n');
gettext('Bit received');
gettext('Bit codified in the  \n'0' and '1' characters');
gettext('Bit codified in the  \n's' and 'n' characters');
gettext('getc-bit-03');
gettext('Baliza luminosa de 2 leds. Parpadean alternativamente a 2Hz cuando se activa');
gettext('Bombear 2 bits por segundo');
gettext('Corazon genérico para bombear bits a la frecuencia fijada en Hz (por defecto 1Hz)');
gettext('## Test Circuit\n\nIt just blinks the two LEDs,  \nwhen started');
gettext('# GETC-BIT: Example 3\n\nExample of starting a circuit by command line  \nThe circuit to start is a simple one: two blinking LEDs  \nAfter the reset, a message is printed on the console asking  \nif the test circuit should be estarted or no  \n\nIf the user press \"y\" (in lower case) the test circuit is turned on  \nand an ok message is printed on the console\n\nIf the user press \"n\" (in lower case) a message is printed on the  \nconsole and the reception of serial comands is disabled');
gettext('Circuit state:  \n0: Disabled  \n1: Enabled  ');
gettext('Receiver state:  \n0: Disabled  \n1: Enabled');
gettext('Enabling the serial  \nline');
gettext('If \"y\" or \"n\" characters are  \nreceived, the serial line  \nis disabled');
gettext('**Initilialization**');
gettext('Sendd the tic to  \nyes or not depending  \non its value  \nyes: 1  \nno : 0 ');
gettext('After printing the  \ninitial message, the  \nserial line is enabled');
gettext('Initial question');
gettext('NO message');
gettext('YES message');
gettext('**Baliza luminosa**\n\nParpadeo de los LEDs alternativamente a 2Hz, cuando están habilitados ');
gettext('Creado a partir de un **corazón  \ngenérico**, dando el valor adecuado  \na su parámetro frecuencia');
gettext('getc-char-01');
gettext('Multiplicador de cables. Genera un bus de 4 bits, a patir del bit de entrada');
gettext('# GETC-CHAR: Example 1\n\nThe keys \"1\", \"2\" and \" \" (space) are detected  \nAll the rest are ignored  \nWhen the \"1\" is detected, the LED7 is turn ON\nwhen the \"2\" is detected, the LED7 is turn OFF\nwhen the \" \" is detectaed, the LEDs 0 - 3 are toglled  \n\nThe GETC-CHAR blocks can be chained. Whem a block detect is character, the  \ncorresponding tic signal is removed from the transparent channel and  \nemited to its rcv output');
gettext('Characters different than \"1\", \"2\",  \nor \" \" are received here... but  \nthey are ignored!');
gettext('Tic emitted when the  \n\"2\" char is detected');
gettext('State of the LED 7  \n0: OFF  \n1: ON');
gettext('Tic emitted when the  \n\"1\" char is detected');
gettext('Tic emitted when the   \n\" \"  char is detected');
gettext('LEDs state:  \n0: Group OFF  \n1: Group ON  ');
gettext('Send the 1-bit input  \nto the 4 outputs  ');
gettext('getc-char-02');
gettext('# GETC-CHAR: Example 2\n\nExample of use of the Input and Output console\n\nWhen the 'h' key is pressed, a greeting message is printed  \non the console  \nIf the 'm' key is pressed, the menu is printed again  \nAny other key pressed will print an error message  ');
gettext('Any key diffent than 'h' or 'm' will  \nissue the error cmd');
gettext('**Greetings command**');
gettext('**Menu command**');
gettext('The menu is printed after the reset or  \nwhen the key 'm' is pressed');
gettext('**INPUT CONSOLE**');
gettext('**OUTPUT CONSOLE**');
gettext('getc-char-03');
gettext('# GETC-CHAR: Example 3\n\nTesting a NOT gate\n\nThe key \"1\" set the input to 1   \nThe key \"2\" set the input to 0  \n\nWhenever there is a change in the input, both  \nthe input and output are printed on the console\n');
gettext('**Input**');
gettext('**output**');
gettext('Show the menu  \nafter reset');
gettext('Print the initial  \nstate: input - output');
gettext('Set input to 1');
gettext('Set input to 0');
gettext('## Circuit to TEST');
gettext('Detect a change in the input  \nif so, print input and output');
gettext('Show the output in the LED');
gettext('Input-bit-01');
gettext('# INPUT-BIT: Example 1\n\nExample of the input-bit block. The state of the LED0  \nis set by the user after the initializacion, only once  \nby pressing the '1' or '0' keys  \nThen the OK! message is printed and no more read on the  \nconsole are allowed');
gettext('Start the input machine  \nafter the reset');
gettext('Wait for one bit from  \nthe user');
gettext('Set the LED state with  \nthe value given by user');
gettext('Input is done. Print the  \nOK! message');
gettext('Prit the OK message after  \nthe user has set the state  \nof the LED');
gettext('Input-bit-02');
gettext('# INPUT-BIT: Example 2\n\nExample of activation of two different input  \nunits. The first one wait for the user to  \nenter \"0\" or \"1\". The second one waits for  \nthe \"y\" or \"n\" symbols  \nWhen finished, the selected LED is blinking or not  \naccording to the user input');
gettext('Print the initial message  \nafter the reset');
gettext('Wait for one bit from  \nthe user: Select LED');
gettext('Select the  \nactive LED');
gettext('LED is selected');
gettext('Initial message');
gettext('Wait for the blinking  \nstate (yes/no)');
gettext('Blinking state');
gettext('Example of the console output:\n\n```\n> Select LED (0/1): \n> Activate blinking? (y/n) \nOK!\n\n```');
gettext('Blink enable/disable');
gettext('Select the LED  \nto blink');
gettext('**ALL starts HERE!!**');
gettext('Second question');
gettext('Input-bit-03');
gettext('Demultiplexor de 1 bit, de 2 a 4');
gettext('**Number**');
gettext('**Number of LEDs**');
gettext('**Count machine**  \nExecute 4 times  \nthe input machine');
gettext('Print messages on the screen  \nThen execute the input machine');
gettext('Wait for the state of the  \nLED n from the console');
gettext('Change the led  \nstate');
gettext('Select the LED');
gettext('LED state, from  \nthe user');
gettext('# INPUT-BIT: Example 3\n\nThere is one input-bit block that is started 4 times by a  \ncount machine. Each user input correspond to the state of one  \nof four LEDs. This is the output in the console:\n\n```\nLED0 state? (0/1) \nLED1 state? (0/1) \nLED2 state? (0/1) \nLED3 state? (0/1) \nOK\n```\n\n');
gettext('**OK message**');
gettext('Input-bit-04');
gettext('# INPUT-BIT: Example 4\n\nTwo chained inputs. The firt bit is used for seting the first  \nLED nad the second bit is for the other LED. The two bits  \nare printed on the stdout');
gettext('Start the second  \nmachine ');
gettext('**Print the bit**');
gettext('Input-bit-05');
gettext('# INPUT-BIT: Example 5\n\nAsking the question y/n?. Depending on the answer, one  \nstring or another is printed');
gettext('**START HERE**');
gettext('Repeat the sequence');
gettext('01-input-bit-button');
gettext('**Read one bit**:  \nWait for the user to  \ntype '1' or '0'');
gettext('Show the received bit  \non the LED');
gettext('Ask for another bit');
gettext('# INPUT-BIT-echo: Example 1\n\nExample of the input-bit-echo block. The state of the LED0  \nis set by the user by pressing the '0' or '1' keys  \nIf valid inputs are received, they are printed (echoed) in the  \nconsole');
gettext('02-input-bit-hterm-01');
gettext('Set the LED according  \nto the command (0/1)');
gettext('Valid command: OK!');
gettext('# INPUT-BIT-echo: Example 2\n\nSimple terminal with only two commands: 0 and 1  \nIt prompts the user to enter the commands. All the  \nkeys are ignored except '1' and '0' that correspond  \nto the valid commands, used to turn the LED on or off\n');
gettext('03-input-bit-hterm-02');
gettext('# Terminal\n\nSmall terminal with two commands:  \n'1' for toggling the LED and  \n'0' for reading the LED's state');
gettext('**Message printing the led state**\n\nString + Bit + Char (new line)');
gettext('Initial \ntic');
gettext('LED state msg');
gettext('Test');
gettext('Print-01-two-buttons');
gettext('# PRINT: Example 1\n\nExample of the PRINT block:  printing a  \nconstant string\n\nTwo differente messages are printed, according  \nto the button pressed\n\n* Button 1 ---> Message 1  \n* Button 2 ---> Message 2');
gettext('**Print message 1**');
gettext('**Print message 2**');
gettext('**Print-ASC** block: The message should be in ASCII in a memory block\n\nAscii codes of a string can be easily obtained by running the following  \nline in python3\n\n\n```pythonn\nprint(\" \".join([\"{:02X}\".format(ord(i)) for i in \"Message\"]) + \" 00\")\n```');
gettext('Print-02-two-buttons-ASCII-art');
gettext('# PRINT: Example 2\n\nSame circuit than the example 1 but the messages has been  \nchanged for big numbers in ASCII art:\n\n* Message for the button SW1:\n\n```\n  _ \n / |\n | |\n | |\n |_|\n```\n\n* Message for the button SW2:\n\n```\n  ____  \n |___ \\ \n   __) |\n  / __/ \n |_____|\n```\n\n');
gettext('Print-03-menu');
gettext('# PRINT: Example 3\n\nAn initial message and a menu are printed initially,  \nafter the reset\n\nWhen the button sw1 is pressed the led is toggle and the  \nOK message is printed on the console\n\nWhen the button sw2 is pressed, the led stated is printed  \non the console');
gettext('This message is printed just  \none time, after the reset');
gettext('**Print the Menu**');
gettext('** Button 2 pressed**');
gettext('** Button 1 pressed**');
gettext('Print-04-str-two-buttons');
gettext('# PRINT: Example 4\n\nExample of the block print-str: printing the string  \npassed as a parameter\n\nDepending on the button pressed, 1 or 2, the messages  \n\"B1 \" or \"B2 \" are printed on the console\n');
gettext('asc');
gettext('str');
gettext('Test-print-asc-02');
gettext('## Test Print-asc-02 \n\nTesting the Print-asc-2 block  \nWhen the button is pressed the charachter  \n'X' is sent');
gettext('Test-print-asc-04');
gettext('## Test Print-asc-04 \n\nTesting the Print-asc-4 block  \nWhen the button is pressed the string    \n\"OK\\n\" is printed!');
gettext('Test-print-asc-08');
gettext('## Test Print-asc-08 \n\nTesting the Print-asc-8 block  \nWhen the button is pressed the  \nmessage is printed');
gettext('Test-print-asc-128');
gettext('## Test Print-asc-128\n\nTesting the Print-asc-128 block  \nWhen the button is pressed the  \nmessage is printed');
gettext('Test-print-asc-16');
gettext('## Test Print-asc-16 \n\nTesting the Print-asc-16 block  \nWhen the button is pressed the  \nmessage is printed');
gettext('Test-print-asc-256');
gettext('## Test Print-asc-256\n\nTesting the Print-asc-256 block  \nWhen the button is pressed the  \nmessage is printed');
gettext('Test-print-asc-32');
gettext('## Test Print-asc-32 \n\nTesting the Print-asc-32 block  \nWhen the button is pressed the  \nmessage is printed');
gettext('Test-print-asc-64');
gettext('## Test Print-asc-64 \n\nTesting the Print-asc-64 block  \nWhen the button is pressed the  \nmessage is printed');
gettext('Test-print-str-02');
gettext('## Test Print-str-02 \n\nTesting the Print-asc-2 block  \nWhen the button is pressed the charachter  \n'X' is sent');
gettext('Test-print-str-04');
gettext('## Test Print-str-04 \n\nTesting the Print-str-4 block  \nWhen the button is press, the \"ok\"  \nstring is printed (it is also printed  \nafter the reset)');
gettext('Test-print-str-08');
gettext('## Test Print-str-08\n\nTesting the Print-str-8 block  \nWhen the button is press the  \nstring is printed (it is also printed  \nafter the reset)');
gettext('Test-print-str-128');
gettext('## Test Print-str-128\n\nTesting the Print-str-128 block  \nWhen the button is press the  \nstring is printed (it is also printed  \nafter the reset)');
gettext('Test-print-str-16');
gettext('## Test Print-str-16\n\nTesting the Print-str-16 block  \nWhen the button is press the  \nstring is printed (it is also printed  \nafter the reset)');
gettext('Test-print-str-256');
gettext('## Test Print-str-256\n\nTesting the Print-str-256 block  \nWhen the button is press the  \nstring is printed (it is also printed  \nafter the reset)');
gettext('Test-print-str-32');
gettext('## Test Print-str-32\n\nTesting the Print-str-32 block  \nWhen the button is press the  \nstring is printed (it is also printed  \nafter the reset)');
gettext('Test-print-str-64');
gettext('## Test Print-str-64\n\nTesting the Print-str-64 block  \nWhen the button is press the  \nstring is printed (it is also printed  \nafter the reset)');
gettext('PrintLn-base4-01-counter');
gettext('# PRINTLN-base4: Example 1\n\nPrinting the numbers from 0 to 3');
gettext('PrintLn-bit-01-button');
gettext('# PRINTLN-bit: Example 1\n\nExample using the PrintLN-bit block\nPrinting the state of the Button 2 when the  \nbutton 1 is pressed');
gettext('Println-ok-01-button');
gettext('Putc-Base-4');
gettext('Putc-bit');
gettext('Putc-char');
gettext('putc-base4-01');
gettext('# PUTC-BASE4-stdout: Example 1\n\nPrinting the 0,1,2 and 3 numbers');
gettext('putc-bit-01');
gettext('Transmit the bit as  \na character ('1' or '0')');
gettext('Bit to transmit  \nIs changed every tic: 0,1,0...');
gettext('Transmit the current bit');
gettext('# PUTC-BIT-stdout: Example 1\n\nSending alternated bits: 0,1,0,1,0,1...  \nRate of Speed: 2 Bits per seccond (2 Hz)');
gettext('putc-bit-02');
gettext('Transmit the button state');
gettext('# PUTC-BIT-stdout: Example 2\n\nThe button 1 is sampled at 10Hz and its state is transmitted');
gettext('State of the button:  \n0: Not pressed  \n1: Pressed');
gettext('putc-bit-03-button-changed');
gettext('Transmit one bit as a characters');
gettext('# PUTC-BIT-stdout: Example 3\n\nThe button state is transmited whenever there is a changed  \non it: either pressed or released');
gettext('Button state:  \n0: Not presssed  \n1: Pressed');
gettext('The button state  \nhas changed');
gettext('Transmit the  \nbutton state');
gettext('The state is transmitted  \ninitially and whenever  \nthere is a change  \nin the button ');
gettext('putc-bit-04-two-buttons');
gettext('# PUTC-BIT-stdout: Example 4\n\nWhen the button 1 is pressed, a 0 is sent  \nWhen the button 2 is pressed, a 1 is sent  ');
gettext('Send '0' when the  \nbutton 1 is pressed');
gettext('Send '1' when the  \nbutton 2 is pressed');
gettext('putc-bit-05-two-buttons2');
gettext('# PUTC-BIT-stdout: Example 5\n\nThe state of both buttons is printed on the console   \n4 times per second  \nThe bits are sent in pairs. When the tic from the heart  \nreaches the first putc-bit module, it sends the button  \n1 state to the stdout bus (it passes through the second  \nputc-bit module as it is OFF (transparent mode))  \n\nWhen it finish, a tic is emited on the done signal that  \nis connected to the txmit input of the second module, allowing  \nit to send the state of the button 2 to the serial port  \n\n');
gettext('Button 2 state');
gettext('Button 1 state');
gettext('When module 1 is  \nfinished, module 2  \nis started');
gettext('**Module 1**');
gettext('**Module 2**');
gettext('putc-bit-06-AND-test');
gettext('# PUTC-BIT-STDOUT: Example 6\n\nShow the inputs (A,B) and output (C) of the AND gate on the console  \nThe Serial output done is connected to next label and should be connected to  \nthe next input of the three Putc-bit blocks\n\nThere are three putc-bit blocks: The first one is for printing the A signal,  \nthe second for the B signal and the third for the C signal\n\nThe module 1 is activated 4 times per second (4Hz). When it is done, the module 2  \nis activated, and then the third ');
gettext('**Module 3**');
gettext('Sample the main circuit  \n4 times per second');
gettext('**Main circuit**: an AND gate controlled by  \ntwo buttons');
gettext('This module sends the \"F\" and  \n\"T\" character instead of 0/1');
gettext('putc-bit-07-AND-test2');
gettext('# PUTC-BIT-STDOUT: Example 7\n\nExample of use of the **STDOUT BUS**  \nIt is the same than example 6, but the signals A,B and C  \nare printed on the console only when there is a change in  \nA or B\n');
gettext('**Main circuit**  ');
gettext('Changes in A and B signals');
gettext('Print the initial state');
gettext('putc-char-01');
gettext('Código ASCII del carácter A');
gettext('Corazón de bombeo de tics a con periodo paramétrico de segundos');
gettext('# PUTC-CHAR: Example 1\n\nExample of use of the putc-char block  \nThe 'A' character is sent every second\n');
gettext('putc-char-02');
gettext('Corazón de bombeo de tics a con periodo paramétrico de milisegundos');
gettext('# PUTC-CHAR: Example 2\n\nExample of chaining the putc-char block with the  \nputc-bit block. The state of the button 1 is  \nprinted on the console every 100ms\n\nFirst the state is printed, followed by a New line\n');
gettext('**Module 2**  \nNew line  ');
gettext('**Module 1**  \nPrinting the button  \nstate');
gettext('putc-char-03');
gettext('# PUTC-CHAR: Example 3\n\nMonitoring a NOT gate: The state of the input and  \noutput are sent throug the serial port every 100ms');
gettext('**Module 3**  ');
gettext('**Module 1**  ');
gettext('**Module 2**  ');
gettext('Print the output  \nas a T or F character');
gettext('Print the Input  \nas '0' or '1' characters');
gettext('Print a new line \n(\\n)');
gettext('Every 100ms the module 1 is started  \nfor printing the input (A). When  \nit is finished, the module 2 is  \nstarted for printing the output (B)  \nand finally the module for printing  \nthe new line character  ');
gettext('putc-char-04');
gettext('# PUTC-CHAR: Example 4\n\nMonitoring a NOT gate: The state of the input and  \noutput are sent throug the serial port whenever  \nthere is a change in its input (also after the reset)  ');
gettext('Where there is a change in the input  \nthe module 1 is started for printing  \nthe input (A). When it is finished,  \nthe module 2 is started for printing  \nthe output (B) and finally the module  \nfor printing the new line character  ');
gettext('There is change in the  \nbutton state  ');
gettext('Initial tic after  \nreset');
gettext('Print the signals  \nif there is a changed  \nin the input or after  \na reset');
gettext('Show the current  \noutput in the LED');
gettext('putc-char-05');
gettext('# PUTC-CHAR: Example 5\n\nExample of use of two putc-char blocks in a chain  \nThe 'A' character is sent every second  \nWhen the button is pressed, the character '*'  \nis sent\n');
gettext('putc-char-06');
gettext('# PUTC-CHAR: Example 6\n\nExample of chaining the putc-char block with the  \nputc-bit block. The state of the button 1 is  \nprinted on the console every 100ms\n\nFirst the state is printed, followed by a New line\n\n');
gettext('**Print(\"\\n\")**');
gettext('**Print the button**  \n**state as a character**  ');
gettext('putc-char-07');
gettext('Código ASCII del carácter J');
gettext('# PUTC-CHAR: Example 7\n\nExample of chaining two putc-char blocks  \nWhen idle, the Character * is printed on the  \nconsole every 2 seconds. If the SW1 is pressed,  \nthe A character is printed. If the SW is pressed,  \nand J character is printed followed by an 'A'\n');
gettext('The char * is printed on the  \nconsole every 2 seconds');
gettext('When the SW2 button is pressed  \nthe J Char is sent, and when it is  \ndone, the A is sent by module 2');
gettext('If the SW1 button is pressed, an  \nA character is sent');
gettext('The A character is also sent  \nwhen the module 1 it is done');
gettext('Create the stdout bus by  \nadding data and tic to rdy');
gettext('putc-char-08');
gettext('# PUTC-CHAR: Example 8\n\nExample of monitoring a NOT Gate. It has only one input (A)  \nand one output (S). This both signals are printed on the  \nconsole every 100ms\n\nExample of what is printed on the console:\n\n```\nA0S1\nA0S1\nA1S0\nA0S1\n...\n```');
gettext('**Print bit S**');
gettext('**Print(\"S\")**');
gettext('**Print bit A**');
gettext('**Print(\"A\")**');
gettext('**Module 4**');
gettext('**Module 5**');
gettext('The module 1 is activated every 100ms  \nAs all the modules are chained, when the  \ni module is done, the i+1 module is started   \n');
gettext('### Circuit to monitorize');
